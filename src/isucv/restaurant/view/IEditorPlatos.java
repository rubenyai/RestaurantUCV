/*
 * Copyright (C) 2015
 *  Fabian Ramos
 *  Ruben Maza
 *  David Contreras
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */

package isucv.restaurant.view;

import isucv.restaurant.controller.Controller;
import isucv.restaurant.model.Especialidad;
import java.util.ArrayList;
import javax.swing.table.DefaultTableModel;

/**
 * @author Equipo Ingenieria de Software <David Contreras, Fabian Ramos, Ruben Maza>
 */

public class IEditorPlatos extends javax.swing.JFrame {

    /*///////////////////////////
    //    ATRIBUTOS INTERNOS   //
    *////////////////////////////
    
    private final static int COLUMN_DESCRIPTION = 0;
    private final static int COLUMN_SIDES = 1;
    private final static int COLUMN_PRICE = 2;
    private final static int COLUMN_TIME = 3;
    private final static int COLUMN_AVAILABLE = 4;

    
    
    /*//////////////
    //   METODOS  //
    *///////////////
    
    public IEditorPlatos() {
        initComponents();
        
        // Establecer ancho de columnas para la Tabla
        Table.getColumnModel().getColumn(COLUMN_DESCRIPTION).setPreferredWidth(160);
        Table.getColumnModel().getColumn(COLUMN_SIDES).setPreferredWidth(60);
        Table.getColumnModel().getColumn(COLUMN_PRICE).setPreferredWidth(60);
        Table.getColumnModel().getColumn(COLUMN_TIME).setPreferredWidth(40);
        Table.getColumnModel().getColumn(COLUMN_AVAILABLE).setPreferredWidth(60);
        
        // Rellenar el Table con el contenido actual de la cartelera (Especialidades)
        DefaultTableModel md = (DefaultTableModel) Table.getModel();
        md.setRowCount(0); // Eliminar el contenido del Table
        
        if (Controller.GetBillboardSpecialities().size() > 0)
        {
            int i;
            for (i = 0; i < Controller.GetBillboardSpecialities().size(); i++)
            {
                // Celdas:
                // Nombre, Contornos, Precio, Tiempo, Visible
                Especialidad e = Controller.GetBillboardSpecialities().get(i);
                
                md.addRow(new Object[] {e.GetName(), e.GetTotalSides(), e.GetPrice(), e.GetTime(), e.GetVisible()});
            }
        }
        
        
        // Actualizar Labels Estadisticos
        lblTotal.setText(Table.getRowCount() + " Especialidades totales.");
        
        int i;
        int count = 0;
        for (i = 0; i < Table.getRowCount(); i++)
        {
            Object val = Table.getModel().getValueAt(i, COLUMN_AVAILABLE);
            if (val != null && (boolean)val)
                count++;
        }
        lblVisible.setText(count + " Especialidades Visibles en Cartelera.");
    }
    
    // Actualiza las estadisticas sobre contornos totales y visibles
    // mostradas en los Labels de la ventana
    private void UpdateInternalStatistics()
    {
        lblTotal.setText(Table.getRowCount() + " Especialidades totales.");
        int i;
        int count = 0;
        for (i = 0; i < Table.getRowCount(); i++)
        {
            Object val = Table.getModel().getValueAt(i, COLUMN_AVAILABLE);
            if (val != null && (boolean)val)
                count++;
        }
        lblVisible.setText(count + " Especialidades Visibles en Cartelera.");
    }
    
    // Permite intercambiar las ventanas activas del controlador al mostrarse
    // y ocultarse
    @Override
    public void setVisible(boolean value)
    {        
        super.setVisible(value);
        
        if (!value)
        {
            Controller.OpenSubTask(1);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        cmdApplyChanges = new javax.swing.JButton();
        cmdDiscardChanges = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        cmdAdd = new javax.swing.JButton();
        cmdDelete = new javax.swing.JButton();
        lblTotal = new javax.swing.JLabel();
        lblVisible = new javax.swing.JLabel();
        cmdDeleteAll = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Editor de Especialidades");
        setMinimumSize(new java.awt.Dimension(580, 393));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Pizza Margarita",  new Integer(0),  new Float(685.4), null,  new Boolean(true)},
                {"Pizza Vegetariana",  new Integer(0),  new Float(590.0), null, null},
                {"Pizza 4 Estaciones",  new Integer(0),  new Float(759.9), null,  new Boolean(true)},
                {"Pollo a la Canasta",  new Integer(2),  new Float(580.4), null,  new Boolean(true)},
                {"Hamburguesa de Carne",  new Integer(1),  new Float(483.8), null,  new Boolean(true)},
                {"Hamburguesa de Pollo",  new Integer(1),  new Float(410.0), null,  new Boolean(true)},
                {"Bistec al ajillo",  new Integer(3),  new Float(499.9), null,  new Boolean(false)},
                {"Parrilla Mixta",  new Integer(2),  new Float(963.1), null,  new Boolean(true)},
                {"Sopa del dia",  new Integer(0),  new Float(348.5), null,  new Boolean(true)}
            },
            new String [] {
                "Descripci√≥n", "Contornos", "Precio", "Tiempo", "Disponible"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Float.class, java.lang.Integer.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        Table.getTableHeader().setReorderingAllowed(false);
        Table.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                TablePropertyChange(evt);
            }
        });
        jScrollPane2.setViewportView(Table);

        cmdApplyChanges.setText("Aplicar Cambios");
        cmdApplyChanges.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdApplyChangesActionPerformed(evt);
            }
        });

        cmdDiscardChanges.setText("Descartar");
        cmdDiscardChanges.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDiscardChangesActionPerformed(evt);
            }
        });

        jLabel1.setText("Platos Almacenados Actualmente");

        cmdAdd.setText("Agregar");
        cmdAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdAddActionPerformed(evt);
            }
        });

        cmdDelete.setText("Eliminar");
        cmdDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDeleteActionPerformed(evt);
            }
        });

        lblTotal.setText("# Platos Totales");

        lblVisible.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblVisible.setText("# Platos Disponibles en Cartelera");
        lblVisible.setToolTipText("");

        cmdDeleteAll.setText("Eliminar Todo");
        cmdDeleteAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDeleteAllActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblTotal)
                                    .addComponent(lblVisible))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 108, Short.MAX_VALUE)
                                .addComponent(cmdApplyChanges, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cmdDiscardChanges, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cmdDelete, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cmdAdd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cmdDeleteAll, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(12, 12, 12))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(cmdApplyChanges, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(cmdDiscardChanges, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblTotal)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblVisible))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cmdAdd)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmdDelete)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmdDeleteAll)
                        .addGap(0, 262, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Permite retornar a la ventana de seleccion de tarea al cerrar
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        this.setVisible(false);
    }//GEN-LAST:event_formWindowClosing

    private void cmdDiscardChangesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDiscardChangesActionPerformed
        // Cierra esta ventana y descarta los cambios
        this.setVisible(false);
    }//GEN-LAST:event_cmdDiscardChangesActionPerformed

    private void cmdDeleteAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDeleteAllActionPerformed
        // Elimina todos los elementos de la lista
        DefaultTableModel md = (DefaultTableModel) Table.getModel();
        md.setRowCount(0);
        
        UpdateInternalStatistics();
    }//GEN-LAST:event_cmdDeleteAllActionPerformed

    private void cmdAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdAddActionPerformed
        // Agrega un elemento adicional (fila) a la tabla
        DefaultTableModel md = (DefaultTableModel) Table.getModel();
        md.setRowCount(md.getRowCount() + 1);
        
        UpdateInternalStatistics();
    }//GEN-LAST:event_cmdAddActionPerformed

    private void cmdDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDeleteActionPerformed
        // Elimina uno o varios elementos (filas) seleccionados de la tabla      
        DefaultTableModel md = (DefaultTableModel) Table.getModel();
        if (md.getRowCount() < 1)
            return;
        
        int i;
        for (i = md.getRowCount() - 1; i >= 0; i--)
        {
            if (Table.isRowSelected(i))
                md.removeRow(i);
        }
        
        UpdateInternalStatistics();
    }//GEN-LAST:event_cmdDeleteActionPerformed

    private void TablePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_TablePropertyChange
        UpdateInternalStatistics();
    }//GEN-LAST:event_TablePropertyChange

    private void cmdApplyChangesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdApplyChangesActionPerformed
        // Elimina el contenido actual de la cartelera (Especialidades)
        // y lo sustituye con el almacenado en esta ventana
        
        Controller.SetBillboardSpecialities(new ArrayList<>());
        
        DefaultTableModel md = (DefaultTableModel) Table.getModel();
        if (md.getRowCount() > 0)
        {
            // Celdas:
            // Nombre, Contornos, Precio, Tiempo, Visible
            
            int i;
            for (i = 0; i < md.getRowCount(); i++)
            {
                Especialidad d = new Especialidad((String)md.getValueAt(i, 0),
                    (Float)md.getValueAt(i, 2),
                    (Integer)md.getValueAt(i, 1),
                    (Integer)md.getValueAt(i, 3),
                    (Boolean)md.getValueAt(i, 4));
                
                Controller.GetBillboardSpecialities().add(d);
            }
        }
        
        this.setVisible(false);
    }//GEN-LAST:event_cmdApplyChangesActionPerformed
 
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable Table;
    private javax.swing.JButton cmdAdd;
    private javax.swing.JButton cmdApplyChanges;
    private javax.swing.JButton cmdDelete;
    private javax.swing.JButton cmdDeleteAll;
    private javax.swing.JButton cmdDiscardChanges;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblTotal;
    private javax.swing.JLabel lblVisible;
    // End of variables declaration//GEN-END:variables
}
