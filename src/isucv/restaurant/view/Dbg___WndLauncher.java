/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package isucv.restaurant.view;

import isucv.restaurant.controller.AppController;
import isucv.restaurant.model.ContadorContorno;
import isucv.restaurant.model.ContadorEspecialidad;
import isucv.restaurant.model.Contorno;
import isucv.restaurant.model.Especialidad;
import isucv.restaurant.model.Pedido;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;

/**
 *
 * @author KDERazorback
 */
public class Dbg___WndLauncher extends javax.swing.JFrame {

    /**
     * Creates new form Dbg___WndLauncher
     */
    public Dbg___WndLauncher() {
        initComponents();
        this.setLocationRelativeTo(null); // Center Window
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cmdDebugUsers = new javax.swing.JButton();
        cmdDebugSideSelector = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        cmdBillboardLoadFromFile = new javax.swing.JButton();
        cmdBillboardSaveToFile = new javax.swing.JButton();
        cmdCreateDebugOrder = new javax.swing.JButton();
        txtOrderId = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Lanzador de Ventanas");
        setResizable(false);

        cmdDebugUsers.setText("Debug Users");
        cmdDebugUsers.setToolTipText("");
        cmdDebugUsers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDebugUsersActionPerformed(evt);
            }
        });

        cmdDebugSideSelector.setText("Debug Side Selector");
        cmdDebugSideSelector.setToolTipText("");
        cmdDebugSideSelector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDebugSideSelectorActionPerformed(evt);
            }
        });

        jButton1.setText("Billboard Debugger");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        cmdBillboardLoadFromFile.setText("LFF");
        cmdBillboardLoadFromFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBillboardLoadFromFileActionPerformed(evt);
            }
        });

        cmdBillboardSaveToFile.setText("STF");
        cmdBillboardSaveToFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBillboardSaveToFileActionPerformed(evt);
            }
        });

        cmdCreateDebugOrder.setText("Create Debug Order");
        cmdCreateDebugOrder.setEnabled(false);
        cmdCreateDebugOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCreateDebugOrderActionPerformed(evt);
            }
        });

        txtOrderId.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtOrderId.setText("2456");

        jLabel1.setText("Order ID");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(cmdDebugSideSelector, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                        .addComponent(cmdDebugUsers, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmdCreateDebugOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(cmdBillboardLoadFromFile))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cmdBillboardSaveToFile)
                            .addComponent(txtOrderId, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(70, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cmdDebugUsers, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cmdDebugSideSelector, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmdBillboardLoadFromFile, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmdBillboardSaveToFile, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmdCreateDebugOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtOrderId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addContainerGap(85, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cmdDebugUsersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDebugUsersActionPerformed
        Dbg___WndUserDebugger wnd = new Dbg___WndUserDebugger();
        AppController.Instance.ActiveWindow = wnd;
        AppController.Instance.ActiveWindow.setVisible(true);

        this.setVisible(false);
        this.dispose();
    }//GEN-LAST:event_cmdDebugUsersActionPerformed

    private void cmdDebugSideSelectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDebugSideSelectorActionPerformed
        Dbg___WndSideSelectorDebugger wnd = new Dbg___WndSideSelectorDebugger();
        AppController.Instance.ActiveWindow = wnd;
        AppController.Instance.ActiveWindow.setVisible(true);

        this.setVisible(false);
        this.dispose();
    }//GEN-LAST:event_cmdDebugSideSelectorActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        Dbg___WndBillboardDebugger wnd = new Dbg___WndBillboardDebugger();
        AppController.Instance.ActiveWindow = wnd;
        AppController.Instance.ActiveWindow.setVisible(true);
        wnd.setLocationRelativeTo(null); // Center Window

        this.setVisible(false);
        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void cmdBillboardLoadFromFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBillboardLoadFromFileActionPerformed
        AppController.Instance.Billboard.Specialities = new ArrayList<>();
        AppController.Instance.Billboard.Sides = new ArrayList<>();
        
         try (BufferedReader br = new BufferedReader(new FileReader(".//billboard.txt")))
		{
			String line;
                        String[] segments;
			while ((line = br.readLine()) != null) {
                                // Comprobar si la linea es un comentario o esta vacia o no contiene comas
                                if (line.length() < 5 || line.charAt(0) == '$' || !line.contains(","))
                                    continue;
                            
				segments = line.split(",");
                                
                                if (segments == null || segments.length < 1)
                                    continue;
                                
                                int i;
                                for (i = 0; i < segments.length; i++)
                                    segments[i] = segments[i].trim();
                                
                                if (segments.length == 5)
                                {
                                    // Especialidad
                                    // Nombre, Precio, Contornos, Tiempo, Visible
                                    Especialidad n = new Especialidad(segments[0], Float.parseFloat(segments[1]), Integer.parseInt(segments[2]), Integer.parseInt(segments[3]), (segments[4].equalsIgnoreCase("true")));
                                    AppController.Instance.Billboard.Specialities.add(n);
                                }
                                else if (segments.length == 3)
                                {
                                    // Contorno
                                    // Nombre, Precio, Visible
                                    Contorno n = new Contorno(segments[0], Float.parseFloat(segments[1]), (segments[2].equalsIgnoreCase("true")));
                                    AppController.Instance.Billboard.Sides.add(n);
                                }
			}
		} catch (IOException e) {
                        throw new RuntimeException(e);
		}
         
         cmdCreateDebugOrder.setEnabled(true);
    }//GEN-LAST:event_cmdBillboardLoadFromFileActionPerformed

    private void cmdBillboardSaveToFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBillboardSaveToFileActionPerformed
        try (BufferedWriter bw = new BufferedWriter(new FileWriter(".//billboard.txt")))
		{
                    // Header
                    bw.write("$ Archivo de Estado de Cartelera\n");
                    bw.write("$ Aqui se almacena el ultimo estado guardado de la Cartelera de la Aplicacion\n");
                    bw.write("\n\n");
                            
                    // Specialities Header
                    bw.write("$ ESPECIALIDADES\n");
                    bw.write("$  Sintaxis: Nombre, Precio, Contornos, Tiempo, Visible\n\n");
                    int i;
                    
                    // Specialities
                    for (i = 0; i < AppController.Instance.Billboard.Specialities.size(); i++)
                    {
                        Especialidad d = AppController.Instance.Billboard.Specialities.get(i);
                        bw.write(d.Name);
                        bw.write(", ");
                        bw.write(d.Price.toString());
                        bw.write(", ");
                        bw.write(d.TotalSides.toString());
                        bw.write(", ");
                        bw.write(d.Time.toString());
                        bw.write(", ");
                        bw.write(d.Visible.toString());
                        bw.write("\n");
                    }
                    
                    // Sides Header
                    bw.write("\n\n$ CONTORNOS\n");
                    bw.write("$  Sintaxis: Nombre, Precio, Visible\n\n");
                    
                    // Sides
                    for (i = 0; i < AppController.Instance.Billboard.Sides.size(); i++)
                    {
                        Contorno d = AppController.Instance.Billboard.Sides.get(i);
                        bw.write(d.Name);
                        bw.write(", ");
                        bw.write(d.Price.toString());
                        //bw.write(", ");
                        //bw.write(d.Time.toString());
                        bw.write(", ");
                        bw.write(d.Visible.toString());
                        bw.write("\n");
                    }
                    
                    bw.flush(); // Sincronizar con el sistema de archivos
		} catch (IOException e) {
                        throw new RuntimeException(e);
		}
    }//GEN-LAST:event_cmdBillboardSaveToFileActionPerformed

    private void cmdCreateDebugOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCreateDebugOrderActionPerformed
        // Order
        Pedido p = new Pedido();
        p.ID = Integer.parseInt(txtOrderId.getText());
        
        // Speciality=Pizza 4 Estaciones (x2)
        ContadorEspecialidad sp = new ContadorEspecialidad(AppController.Instance.Billboard.Specialities.get(2));
        sp.Count = 2;
        p.Specialities.add(sp);
        
        // Speciality=Pizza Margarita (x1)
        sp = new ContadorEspecialidad(AppController.Instance.Billboard.Specialities.get(0));
        sp.Count = 1;
        p.Specialities.add(sp);
        
        // Speciality=Pollo a la Canasta (x1) {Yuca Frita, Papas al Vapor}
        ArrayList<ContadorContorno> sides = new ArrayList<>();
        sp = new ContadorEspecialidad(AppController.Instance.Billboard.Specialities.get(3));
        sp.AddCount(1);
        ContadorContorno cont = new ContadorContorno(AppController.Instance.Billboard.Sides.get(2));
        cont.Count = 1;
        sides.add(cont);
        cont = new ContadorContorno(AppController.Instance.Billboard.Sides.get(1));
        cont.Count = 1;
        sides.add(cont);
        sp.SetSides(sides);
        p.Specialities.add(sp);
                
        // Speciality=Pollo a la Canasta (x1) {Papas al Vapor (x2)}
        sides = new ArrayList<>();
        sp = new ContadorEspecialidad(AppController.Instance.Billboard.Specialities.get(3));
        sp.AddCount(1);
        cont = new ContadorContorno(AppController.Instance.Billboard.Sides.get(1));
        cont.Count = 2;
        sides.add(cont);
        sp.SetSides(sides);
        p.Specialities.add(sp);
        
        // Additional Side=Papas al Vapor (x1)
        cont = new ContadorContorno(AppController.Instance.Billboard.Sides.get(1));
        cont.Count = 1;
        p.Sides.add(cont);
        
        // Add Order to UnpaidOrders
        AppController.Instance.UnpaidOrders.add(p);
    }//GEN-LAST:event_cmdCreateDebugOrderActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cmdBillboardLoadFromFile;
    private javax.swing.JButton cmdBillboardSaveToFile;
    private javax.swing.JButton cmdCreateDebugOrder;
    private javax.swing.JButton cmdDebugSideSelector;
    private javax.swing.JButton cmdDebugUsers;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JTextField txtOrderId;
    // End of variables declaration//GEN-END:variables
}
